// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User who can access the admin dashboard
model User {
  id        String     @id @default(cuid())
  email     String     @unique @db.VarChar(255)
  username  String     @unique @db.VarChar(100) // To store the HRMS id_ field
  name      String     @db.VarChar(255)
  role      Role       @default(AGENT)
  status    Status     @default(PENDING)
  campaigns Campaign[] @relation("CreatedCampaigns")
  assignedLeads Lead[] @relation("AssignedLeads")
  assignedCampaigns Campaign[] @relation("AssignedCampaigns")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  lastLogin DateTime?

  // Performance optimized indexes
  @@index([email])
  @@index([username])
  @@index([status])
  @@index([role])
  @@index([createdAt])
  @@index([lastLogin])
  // Composite indexes for admin queries
  @@index([status, role])
  @@index([role, createdAt])
  @@index([status, lastLogin])
  // Search optimization
  @@index([name]) // Add name index for search
  @@map("users")
}

// Campaign for a specific company or use case
model Campaign {
  id                String   @id @default(cuid())
  campaign_name     String   @db.VarChar(255)
  organization_name String   @db.VarChar(255)
  uniqueLink        String   @unique @db.VarChar(100)
  leads             Lead[]
  is_active         Boolean  @default(true)
  lead_count        Int      @default(0) @db.Integer
  click_count       Int      @default(0) @db.Integer
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         User     @relation("CreatedCampaigns", fields: [createdById], references: [id])
  createdById       String
  assignedTo        User?    @relation("AssignedCampaigns", fields: [assignedToId], references: [id])
  assignedToId      String?

  // Performance optimized indexes
  @@index([createdById])
  @@index([assignedToId])
  @@index([is_active])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([lead_count])
  // Composite indexes for dashboard queries
  @@index([is_active, createdAt])
  @@index([createdById, is_active])
  @@index([assignedToId, is_active])
  @@index([is_active, lead_count, createdAt]) // Performance ranking
  @@map("campaigns")
}

// A captured lead from a client
model Lead {
  id             String         @id @default(cuid())
  fullName       String         @db.VarChar(255)
  phoneNumber    String         @db.VarChar(20)
  businessSector Sector         @relation(fields: [sectorId], references: [id])
  sectorId       String
  products       Product[]
  campaign       Campaign?      @relation(fields: [campaignId], references: [id])
  campaignId     String?
  assignedTo     User?          @relation("AssignedLeads", fields: [assignedToId], references: [id])
  assignedToId   String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Performance optimized indexes
  @@index([fullName])
  @@index([phoneNumber])
  @@index([sectorId])
  @@index([campaignId])
  @@index([assignedToId])
  @@index([createdAt])
  @@index([updatedAt])
  // Composite indexes for common query patterns
  @@index([campaignId, createdAt])
  @@index([sectorId, createdAt])
  @@index([assignedToId, createdAt])
  @@index([createdAt, campaignId, sectorId]) // Multi-filter queries
  @@map("leads")
}

// Parent Product Category
model ProductCategory {
  id          String    @id @default(cuid())
  name        String    @unique @db.VarChar(255)
  description String?   @db.Text
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([name])
  @@map("product_categories")
}

// A list of available products (sub-products)
model Product {
  id              String         @id @default(cuid())
  name            String         @db.VarChar(255)
  description     String?        @db.Text
  category        ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId      String
  leads           Lead[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([name])
  @@index([categoryId])
  @@map("products")
}

// Business sectors for the dropdown
model Sector {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(255)
  leads     Lead[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@map("sectors")
}

// Application settings
model Setting {
  id        String   @id @default(cuid())
  key       String   @unique @db.VarChar(100)
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@map("settings")
}

// User roles for authorization
enum Role {
  ADMIN
  BSS
  INFOSEC
  AGENT
  SUPERVISOR
}

// User status for account management
enum Status {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  INACTIVE
  DELETED
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique @db.VarChar(100) // e.g., "manage_users", "view_reports"
  description String?  @db.Text
  roles       RolePermission[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  role         Role
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String
  createdAt    DateTime   @default(now())

  @@unique([role, permissionId])
  @@index([role])
  @@index([permissionId])
  @@map("role_permissions")
}



